package api_test

import (
	"testing"

	"github.com/skema-dev/skemabuild/internal/api"
	"github.com/stretchr/testify/assert"
)

const testProtoContent = `
syntax = "proto3";
// Generated by skemabuild. DO NOT EDIT.
package abc.aaa;
{{ .Options }}

import "google/api/annotations.proto";
import "validate/validate.proto";
import "protoc-gen-openapiv2/options/annotations.proto";

// User Defined Protobuf Code Section
service Test1 {
    rpc Heathcheck (HealthcheckRequest) returns (HealthcheckResponse){
        option (google.api.http) = {
          get: "/api/healthcheck"
        };
    }
}

message HealthcheckRequest {
}

message HealthcheckResponse {
    string result = 1;
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_schema) = {
        example: "{\"result\": \"ok\"}"
    };
}
`

func TestGetPatternValue(t *testing.T) {
	service := api.GetServiceNameFromProto(testProtoContent)
	assert.Equal(t, "Test1", service)

	packageName := api.GetPackageNameFromProto(testProtoContent)
	assert.Equal(t, "abc.aaa", packageName)

}

func TestGenerateStub(t *testing.T) {
	creator := api.NewGoStubCreator("github.com/skema-dev/test")
	stubs, err := creator.Generate(testProtoContent)
	assert.Nil(t, err)
	//fmt.Printf("%v\n", result)
	_, ok := stubs["Test1.pb.go"]
	assert.True(t, ok)
	_, ok = stubs["Test1.pb.gw.go"]
	assert.True(t, ok)
	_, ok = stubs["Test1.pb.validate.go"]
	assert.True(t, ok)
	_, ok = stubs["Test1_grpc.pb.go"]
	assert.True(t, ok)
	_, ok = stubs["Test1.proto"]
	assert.True(t, ok)
}

func TestGenerateOpenAPI(t *testing.T) {
	creator := api.NewOpenapiStubCreator()
	stubs, err := creator.Generate(testProtoContent)
	assert.Nil(t, err)

	_, ok := stubs["Test1.proto"]
	assert.True(t, ok)
	_, ok = stubs["Test1.swagger.json"]
	assert.True(t, ok)
}
